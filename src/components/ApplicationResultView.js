import React, { useRef } from "react";
import { useTranslation } from "react-i18next";
import { Card, Table, Typography, Tag } from "antd";
import Icon from "../utils/IconWrapper";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";
import UserDetailsCard from "./UserDetailsCard";
import "../styles/application.css";

const { Text } = Typography;

const STATUS = {
  PENDING: "Pending",
  UNDER_REVIEW: "Under Review",
  APPROVED: "Approved",
  REJECTED: "Rejected",
};

const ApplicationResultView = ({ result }) => {
  const { t } = useTranslation();
  const pdfRef = useRef(); // Ref to capture the container

  const generatePDF = () => {
    const input = pdfRef.current;
    // Temporarily hide the button in UserDetailsCard
    const button = input.querySelector(".hide-in-pdf");
    if (button) button.style.display = "none";

    html2canvas(input, { scale: 2, useCORS: true }).then((canvas) => {
      const imgData = canvas.toDataURL("image/png");
      const pdf = new jsPDF("p", "mm", "a4");
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = pdf.internal.pageSize.getHeight();
      const marginTop = 20; // 10mm top margin
      const marginSide = 15; // 10mm left/right margin
      const contentWidth = pdfWidth - 2 * marginSide; // Width after margins
      const contentHeight = pdfHeight - marginTop - 5; // Height after top margin
      const imgWidth = canvas.width;
      const imgHeight = canvas.height;
      const ratio = Math.min(
        contentWidth / imgWidth,
        contentHeight / imgHeight
      );
      const width = imgWidth * ratio;
      const height = imgHeight * ratio;

      // Add text in top-right corner
      pdf.setTextColor(64, 64, 64); // Dark gray (RGB: 64, 64, 64)
      pdf.setFontSize(7); // Font size 12
      const text = "This PDF is auto-generated by system";
      const textWidth = pdf.getTextWidth(text);
      pdf.text(text, pdfWidth - marginSide - textWidth, marginTop); // Right-aligned

      // Add image below text
      pdf.addImage(imgData, "PNG", marginSide, marginTop + 3, width, height); // 5mm below text
      pdf.save(`Application_${result.applicant_id || "Unknown"}.pdf`);

      // Restore button visibility
      if (button) button.style.display = "block";
    });
  };

  if (!result) return null;

  // Table columns with translated names
  const columns = [
    {
      title: t("field_name"),
      dataIndex: "field",
      key: "field",
    },
    {
      title: t("value"),
      dataIndex: "value",
      key: "value",
      render: (text) => (
        <span style={{ fontSize: 16, fontWeight: 500 }}>{text || "-"}</span>
      ),
    },
  ];

  // Table data
  const dataSource =
    result.found === 1
      ? [
          {
            key: "application_id",
            field: t("application_id"),
            value: result.application_id,
          },
          {
            key: "applicant_id",
            field: t("applicant_id"),
            value: result.applicant_id,
          },
          {
            key: "status",
            field: t("status"),
            value: (
              <Tag
                color={
                  result.status === STATUS.PENDING ||
                  result.status === STATUS.UNDER_REVIEW
                    ? "#fa8c16"
                    : result.status === STATUS.REJECTED
                    ? "#ff4d4f"
                    : result.status === STATUS.APPROVED
                    ? "#52c41a"
                    : "#d9d9d9"
                }
                style={{
                  color: "white",
                  borderRadius: "5px",
                  padding: "2px 8px",
                  fontWeight: "bold",
                }}
              >
                {result.status}
              </Tag>
            ),
          },
          {
            key: "approved",
            field: t("approved"),
            value: result.approved === 1 ? t("yes") : t("no"),
          },
          {
            key: "approved_amount",
            field: t("approved_amount"),
            value: result.approved_amount
              ? `${result.approved_amount?.toFixed(2)}CAD`
              : null,
          },
          {
            key: "interest_rate",
            field: t("interest_rate"),
            value: result.interest_rate
              ? `${result.interest_rate?.toFixed(2)}%`
              : null,
          },
          {
            key: "dti",
            field: t("dti"),
            value: result.dti ? `${result.dti?.toFixed(2)}%` : null,
          },
          {
            key: "created_at",
            field: t("created_at"),
            value: new Date(result.created_at).toLocaleString(),
          },
          {
            key: "updated_at",
            field: t("updated_at"),
            value: new Date(result.updated_at).toLocaleString(),
          },
          {
            key: "approved_at",
            field: t("approved_at"),
            value: result.approved_at
              ? new Date(result.approved_at).toLocaleString()
              : null,
          },
        ].filter(
          (row) =>
            row.value !== "N/A" && row.value !== null && row.value !== undefined
        )
      : [];

  // Status tracking logic
  const getStatusTrack = (status) => {
    const statuses = [STATUS.PENDING, STATUS.UNDER_REVIEW];
    if (status === STATUS.APPROVED) {
      statuses.push(STATUS.APPROVED);
    } else if (status === STATUS.REJECTED) {
      statuses.push(STATUS.REJECTED);
    } else {
      statuses.push(STATUS.APPROVED); // Default next step
    }
    return statuses;
  };

  const statusTrack = getStatusTrack(result.status);

  const IconWrapper = (type, color) => {
    return <Icon type={type} style={{ color: color, fontSize: 28 }} />;
  };

  return (
    <div className="application-result-container" ref={pdfRef}>
      <UserDetailsCard user_info={result.user_info} generatePDF={generatePDF} />
      {result.found === 0 ? (
        <Card className="application-result-card">
          <Text>{t("no_application_found")}</Text>
        </Card>
      ) : (
        <div style={{ display: "flex", flexDirection: "row" }}>
          {/* Table View */}
          <Card
            className="application-result-card"
            title={
              <span style={{ fontSize: 20, fontWeight: "bold" }}>
                {t("application_details")}
              </span>
            }
          >
            <Table
              columns={columns}
              dataSource={dataSource}
              pagination={false}
              bordered
              rowKey="key"
            />
          </Card>

          <div style={{ width: "80%", marginLeft: 10 }}>
            {/* Status Tracking Card */}
            <Card
              className="status-track-card"
              style={{ marginBottom: 10 }}
              title={
                <span style={{ fontSize: 20, fontWeight: "bold" }}>
                  {t("status_tracking")}
                </span>
              }
            >
              <div className="status-track">
                {statusTrack.map((statusItem, index) => {
                  const isPast = statusTrack.indexOf(result.status) > index;
                  const isCurrent =
                    statusTrack.indexOf(result.status) === index;
                  const isRejected =
                    result.status === STATUS.REJECTED &&
                    statusItem === STATUS.REJECTED;
                  const lineColor = isPast
                    ? "#52c41a"
                    : isCurrent
                    ? "#faad14"
                    : isRejected
                    ? "red"
                    : "#d9d9d9";
                  const ringColor = isPast
                    ? "#52c41a"
                    : isCurrent
                    ? "#faad14"
                    : isRejected
                    ? "red"
                    : "#d9d9d9";

                  return (
                    <div
                      style={{
                        display: "flex",
                        flexDirection: "column",
                        width: "100%",
                      }}
                    >
                      {index > 0 && <div className="status-line" />}

                      <div
                        style={{
                          display: "flex",
                          flexDirection: "row",
                          width: "100%",
                          alignItems: "center",
                        }}
                      >
                        {isPast
                          ? IconWrapper("CheckCircleOutlined", "#52c41a")
                          : isRejected
                          ? IconWrapper("CloseCircleOutlined", "red")
                          : isCurrent && result.status != "Approved"
                          ? IconWrapper("ClockCircleOutlined", "#faad14")
                          : IconWrapper(
                              result.status == "Approved"
                                ? "CheckCircleOutlined"
                                : "ClockCircleOutlined",
                              result.status == "Approved" ? "#52c41a" : "gray"
                            )}

                        <div style={{ marginLeft: 15, width: "100%" }}>
                          <Text className="message-text">
                            <span>{`${t(statusItem)} ${
                              isPast ? "( " + t("Completed") + " )" : ""
                            }`}</span>{" "}
                            <br />{" "}
                            <span>{`${
                              result.status == "Approved" &&
                              statusItem == "Approved" &&
                              result.approved_at
                                ? new Date(result.approved_at).toLocaleString()
                                : result.status == "Rejected" &&
                                  statusItem == "Rejected" &&
                                  result.updated_at
                                ? new Date(result.updated_at).toLocaleString()
                                : ""
                            }`}</span>{" "}
                          </Text>
                        </div>
                      </div>
                    </div>
                    // <div key={statusItem} className="status-item">
                    //   <div
                    //     className="status-ring"
                    //     style={{ borderColor: ringColor }}
                    //   />
                    //   <div className="status-label">
                    //     {t(statusItem.toLowerCase())}
                    //   </div>
                    //   {index < statusTrack.length - 1 && (
                    //     //   <div className="status-line" style={{ backgroundColor: 'black' }} />
                    //     <div className="status-line" />
                    //   )}
                    // </div>
                  );
                })}
              </div>
            </Card>

            {/* Messages Card */}
            <Card
              className="messages-card"
              title={
                <span style={{ fontSize: 20, fontWeight: "bold" }}>
                  {t("additional_info")}
                </span>
              }
            >
              {result.rejected_reason && (
                <div className="message-item">
                  <Text strong style={{ fontSize: 16 }}>
                    {t("rejected_reason")}:{" "}
                  </Text>
                  <Text className="message-text">{result.rejected_reason}</Text>
                </div>
              )}
              {result.admin_notes && (
                <div className="message-item">
                  <Text strong style={{ fontSize: 16 }}>
                    {t("admin_notes")}:{" "}
                  </Text>
                  <Text className="message-text">{result.admin_notes}</Text>
                </div>
              )}
              {!result.rejected_reason && !result.admin_notes && (
                <Text>{t("no_additional_info")}</Text>
              )}
            </Card>
          </div>
        </div>
      )}
    </div>
  );
};

export default ApplicationResultView;
